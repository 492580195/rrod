using System;
using System.Threading.Tasks;

using System.Net.WebSockets;
using System.Threading;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;


namespace Webapp.Services
{
    public class WebSocketMiddleware
    {
        public const int BufferSize = 4096;
        RequestDelegate next;

        WebSocketMiddleware(RequestDelegate next)        
        {
            this.next = next;
        }

        public async Task Invoke(HttpContext context)
        {
            if (!context.WebSockets.IsWebSocketRequest)
            {
                await this.next.Invoke(context);
            }
            else
            {
                var socket = await context.WebSockets.AcceptWebSocketAsync();
                await this.EchoLoop(socket);
            }
        }

        async Task EchoLoop(WebSocket socket)
        {
            var buffer = new byte[BufferSize];
            var seg = new ArraySegment<byte>(buffer);

            while (socket.State == WebSocketState.Open)
            {
                var incoming = await socket.ReceiveAsync(seg, CancellationToken.None);
                var outgoing = new ArraySegment<byte>(buffer, 0, incoming.Count);
                await socket.SendAsync(outgoing, WebSocketMessageType.Text, true, CancellationToken.None);
            }
        }
    }
}
